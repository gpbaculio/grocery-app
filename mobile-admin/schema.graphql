type Query {
  viewer: ViewerType
  test: String
}

type ViewerType {
  user: UserNode
  product(
    """The ID of the object"""
    id: ID!
  ): ProductNode
  allProducts(offset: Int, before: String, after: String, first: Int, last: Int, title: String, price: Decimal, stock: Int): ProductNodeConnection
  order(
    """The ID of the object"""
    id: ID!
  ): OrderNode
  allOrders(offset: Int, before: String, after: String, first: Int, last: Int, status: String, totalAmount: Decimal): OrderNodeConnection
}

type UserNode implements Node {
  """The ID of the object"""
  id: ID!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  email: String!
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

type ProductNode implements Node {
  """The ID of the object"""
  id: ID!
  title: String!
  image: String!
  price: Decimal!
  stock: Int!
  orderitemSet(offset: Int, before: String, after: String, first: Int, last: Int, quantity: Int): OrderItemNodeConnection!
}

"""The `Decimal` scalar type represents a python Decimal."""
scalar Decimal

type OrderItemNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [OrderItemNodeEdge]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `OrderItemNode` and its cursor."""
type OrderItemNodeEdge {
  """The item at the end of the edge"""
  node: OrderItemNode

  """A cursor for use in pagination"""
  cursor: String!
}

type OrderItemNode implements Node {
  """The ID of the object"""
  id: ID!
  order: OrderNode!
  product: ProductNode!
  quantity: Int!
}

type OrderNode implements Node {
  """The ID of the object"""
  id: ID!
  orderDate: DateTime!
  status: String!
  totalAmount: Decimal
  shippingAddress: String!
  billingAddress: String!
  paymentMethod: String!
  paymentStatus: String!
  trackingNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
  items(offset: Int, before: String, after: String, first: Int, last: Int, quantity: Int): OrderItemNodeConnection!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type ProductNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProductNodeEdge]!
}

"""A Relay edge containing a `ProductNode` and its cursor."""
type ProductNodeEdge {
  """The item at the end of the edge"""
  node: ProductNode

  """A cursor for use in pagination"""
  cursor: String!
}

type OrderNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [OrderNodeEdge]!
}

"""A Relay edge containing a `OrderNode` and its cursor."""
type OrderNodeEdge {
  """The item at the end of the edge"""
  node: OrderNode

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createProduct(input: CreateProductInput!): CreateProductPayload
  removeProduct(input: RemoveProductInput!): RemoveProductPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  createOrder(input: CreateOrderInput!): CreateOrderPayload

  """Obtain JSON Web Token mutation"""
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String): Verify
  refreshToken(refreshToken: String): Refresh
}

type CreateProductPayload {
  product: ProductNode
  clientMutationId: String
}

input CreateProductInput {
  title: String!
  image: String!
  price: String!
  stock: Int!
  clientMutationId: String
}

type RemoveProductPayload {
  success: Boolean
  clientMutationId: String
}

input RemoveProductInput {
  productId: ID!
  clientMutationId: String
}

type CreateUserPayload {
  user: UserNode
  clientMutationId: String
}

input CreateUserInput {
  fullName: String!
  image: String!
  address: String!
  isSuperuser: Boolean
  clientMutationId: String
}

type CreateOrderPayload {
  order: OrderNode
  clientMutationId: String
}

input CreateOrderInput {
  customerId: Int!
  shippingAddress: String!
  billingAddress: String!
  paymentMethod: String!
  paymentStatus: String
  products: [Int]
  quantities: [Int]
  clientMutationId: String
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
  refreshToken: String!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type Verify {
  payload: GenericScalar!
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
  refreshToken: String!
}